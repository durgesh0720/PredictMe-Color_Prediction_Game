# Generated by Django 5.2.4 on 2025-07-16 16:18

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('password_hash', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('balance', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MasterWallet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('available_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('reserved_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('bank_ifsc_code', models.CharField(blank=True, max_length=20, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('account_holder_name', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_account_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_settlement_account', models.CharField(blank=True, max_length=100, null=True)),
                ('total_deposits_received', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_withdrawals_paid', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_game_winnings_paid', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_game_losses_collected', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'master_wallet',
            },
        ),
        migrations.CreateModel(
            name='GameControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_type', models.CharField(default='parity', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_result', models.BooleanField(default=True)),
                ('manual_result_number', models.IntegerField(blank=True, null=True)),
                ('manual_result_color', models.CharField(blank=True, max_length=10, null=True)),
                ('round_duration', models.IntegerField(default=180)),
                ('betting_duration', models.IntegerField(default=150)),
                ('admin_control_interval', models.IntegerField(default=10)),
                ('use_minimum_selection', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('game_type',)},
            },
        ),
        migrations.CreateModel(
            name='GameRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room', models.CharField(db_index=True, max_length=50)),
                ('start_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('result_color', models.CharField(blank=True, max_length=10, null=True)),
                ('result_number', models.IntegerField(blank=True, null=True)),
                ('period_id', models.CharField(blank=True, db_index=True, max_length=20)),
                ('game_type', models.CharField(db_index=True, default='parity', max_length=20)),
                ('ended', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'ordering': ['-start_time'],
                'indexes': [models.Index(fields=['room', 'ended'], name='polling_gam_room_365dc4_idx'), models.Index(fields=['game_type', 'ended'], name='polling_gam_game_ty_75c950_idx'), models.Index(fields=['start_time'], name='polling_gam_start_t_8c87a8_idx'), models.Index(fields=['period_id'], name='polling_gam_period__6ef225_idx'), models.Index(fields=['ended', 'start_time'], name='polling_gam_ended_cc695f_idx'), models.Index(fields=['game_type', 'ended', 'start_time'], name='polling_gam_game_ty_868d42_idx')],
            },
        ),
        migrations.CreateModel(
            name='AdminColorSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_color', models.CharField(blank=True, max_length=10, null=True)),
                ('selection_time', models.DateTimeField(auto_now_add=True)),
                ('is_auto_selected', models.BooleanField(default=False)),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='polling.admin')),
                ('round', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='polling.gameround')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('game', 'Game Events'), ('wallet', 'Wallet & Transactions'), ('account', 'Account Activities'), ('system', 'System Announcements'), ('security', 'Security Alerts')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('default_enabled', models.BooleanField(default=True)),
                ('email_enabled', models.BooleanField(default=True)),
                ('in_app_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='polling_not_categor_423834_idx')],
            },
        ),
        migrations.CreateModel(
            name='OTPVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('otp_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('attempts', models.IntegerField(default=0)),
                ('max_attempts', models.IntegerField(default=3)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email', 'created_at'], name='polling_otp_email_191171_idx'), models.Index(fields=['otp_code', 'expires_at'], name='polling_otp_otp_cod_f345a8_idx')],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(db_index=True, max_length=50, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('password_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('score', models.IntegerField(db_index=True, default=0)),
                ('balance', models.IntegerField(default=0)),
                ('total_bets', models.IntegerField(default=0)),
                ('total_wins', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['username'], name='polling_pla_usernam_a3cd2e_idx'), models.Index(fields=['email'], name='polling_pla_email_3a544e_idx'), models.Index(fields=['score'], name='polling_pla_score_ec6294_idx'), models.Index(fields=['created_at'], name='polling_pla_created_a8fc8c_idx'), models.Index(fields=['is_active', 'created_at'], name='polling_pla_is_acti_0d04aa_idx'), models.Index(fields=['balance'], name='polling_pla_balance_c08ae6_idx'), models.Index(fields=['total_bets', 'total_wins'], name='polling_pla_total_b_71204f_idx')],
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razorpay_order_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=255, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='INR', max_length=3)),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('canceled', 'Canceled'), ('processing', 'Processing')], default='pending', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('bank_account_info', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('fraud_score', models.IntegerField(default=0)),
                ('is_flagged', models.BooleanField(default=False)),
                ('admin_notes', models.TextField(blank=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.player')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('html_message', models.TextField(blank=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('failed', 'Failed')], default='pending', max_length=10)),
                ('email_sent', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('in_app_delivered', models.BooleanField(default=False)),
                ('in_app_delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('extra_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('notification_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.notificationtype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='polling.player')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bet_type', models.CharField(choices=[('color', 'Color'), ('number', 'Number')], db_index=True, default='color', max_length=10)),
                ('color', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('amount', models.IntegerField(default=0)),
                ('correct', models.BooleanField(db_index=True, default=False)),
                ('payout', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.gameround')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.player')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_number', models.CharField(max_length=50)),
                ('ifsc_code', models.CharField(max_length=20)),
                ('bank_name', models.CharField(max_length=100)),
                ('account_holder_name', models.CharField(max_length=100)),
                ('account_type', models.CharField(choices=[('savings', 'Savings'), ('current', 'Current')], default='savings', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(blank=True, max_length=50, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('total_withdrawals', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='polling.player')),
            ],
            options={
                'db_table': 'user_bank_accounts',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal'), ('bet', 'Bet Placed'), ('win', 'Bet Won'), ('admin_adjust', 'Admin Adjustment'), ('refund', 'Refund'), ('bonus', 'Bonus'), ('penalty', 'Penalty')], max_length=20)),
                ('amount', models.IntegerField()),
                ('balance_before', models.IntegerField()),
                ('balance_after', models.IntegerField()),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=True)),
                ('verification_code', models.CharField(blank=True, max_length=50)),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='polling.admin')),
                ('bet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='polling.bet')),
                ('payment_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='polling.paymenttransaction')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.player')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('in_app', 'In-App'), ('both', 'Both'), ('none', 'None')], default='both', max_length=10)),
                ('is_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.notificationtype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to='polling.player')),
            ],
        ),
        migrations.CreateModel(
            name='WalletTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal'), ('bet_placed', 'Bet Placed'), ('bet_won', 'Bet Won'), ('bet_lost', 'Bet Lost'), ('refund', 'Refund'), ('bonus', 'Bonus'), ('penalty', 'Penalty'), ('transfer_in', 'Transfer In'), ('transfer_out', 'Transfer Out')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance_before', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance_after', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField()),
                ('payment_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('withdrawal_request_id', models.CharField(blank=True, max_length=100, null=True)),
                ('bet_id', models.CharField(blank=True, max_length=100, null=True)),
                ('involves_real_money', models.BooleanField(default=True)),
                ('master_wallet_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_transactions', to='polling.player')),
            ],
            options={
                'db_table': 'wallet_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('20'))])),
                ('bank_account_number', models.CharField(max_length=50)),
                ('bank_ifsc_code', models.CharField(max_length=20)),
                ('bank_name', models.CharField(max_length=100)),
                ('account_holder_name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending Admin Approval'), ('approved', 'Approved by Admin'), ('processing', 'Processing Payment'), ('completed', 'Payment Completed'), ('rejected', 'Rejected by Admin'), ('failed', 'Payment Failed'), ('cancelled', 'Cancelled by User')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_gateway_response', models.JSONField(blank=True, null=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_withdrawals', to='polling.admin')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to='polling.player')),
            ],
            options={
                'db_table': 'withdrawal_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polling.admin')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['admin', 'created_at'], name='polling_adm_admin_i_747db7_idx'), models.Index(fields=['action', 'created_at'], name='polling_adm_action_aaaba4_idx')],
            },
        ),
        migrations.CreateModel(
            name='MasterWalletTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('credit', 'Credit'), ('debit', 'Debit'), ('reserve', 'Reserve'), ('release', 'Release')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('balance_after', models.DecimalField(decimal_places=2, max_digits=15)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('master_wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='polling.masterwallet')),
            ],
            options={
                'db_table': 'master_wallet_transactions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['master_wallet', 'created_at'], name='master_wall_master__643326_idx'), models.Index(fields=['transaction_type', 'created_at'], name='master_wall_transac_e3af67_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['player', 'created_at'], name='polling_pay_player__92fd89_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['transaction_type', 'status'], name='polling_pay_transac_56db86_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['razorpay_order_id'], name='polling_pay_razorpa_2f6a5e_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['status', 'created_at'], name='polling_pay_status_770f81_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['player', 'transaction_type', 'status'], name='polling_pay_player__22faec_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'status', 'created_at'], name='polling_not_user_id_825005_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type', 'status'], name='polling_not_notific_c03c8d_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['priority', 'created_at'], name='polling_not_priorit_3287ad_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['expires_at'], name='polling_not_expires_0c829f_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['player', 'created_at'], name='polling_bet_player__f67c92_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['round', 'player'], name='polling_bet_round_i_465b27_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['bet_type', 'color'], name='polling_bet_bet_typ_e6ef50_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['correct', 'created_at'], name='polling_bet_correct_f0aa4a_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['player', 'correct'], name='polling_bet_player__4dd4cb_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['round', 'bet_type'], name='polling_bet_round_i_e21fbd_idx'),
        ),
        migrations.AddIndex(
            model_name='bet',
            index=models.Index(fields=['player', 'round'], name='unique_player_round_idx'),
        ),
        migrations.AddConstraint(
            model_name='bet',
            constraint=models.UniqueConstraint(fields=('player', 'round'), name='unique_player_round_bet', violation_error_message='You can only place one bet per round.'),
        ),
        migrations.AlterUniqueTogether(
            name='bet',
            unique_together={('player', 'round')},
        ),
        migrations.AlterUniqueTogether(
            name='bankaccount',
            unique_together={('player', 'account_number')},
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['player', 'created_at'], name='polling_tra_player__95404e_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_type', 'created_at'], name='polling_tra_transac_aa4105_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['player', 'transaction_type'], name='polling_tra_player__358704_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['bet', 'transaction_type'], name='polling_tra_bet_id_207f89_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['payment_transaction'], name='polling_tra_payment_e809d6_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['is_verified', 'created_at'], name='polling_tra_is_veri_2544d1_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotificationpreference',
            index=models.Index(fields=['user', 'is_enabled'], name='polling_use_user_id_91239b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usernotificationpreference',
            unique_together={('user', 'notification_type')},
        ),
    ]
